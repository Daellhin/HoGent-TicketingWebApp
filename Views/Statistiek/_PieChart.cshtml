@model ChartViewModel
@{
	var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Data.Keys);
	var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Data.Values);
}

<div class="card mb-3" style="min-height: 20rem">
	<div class="card-body">
		<div class="card-title mb-2">
			<h2 class="d-inline">@Model.Title</h2>
			<div class="btn-group btn-group-toggle float-right" data-toggle="buttons">
				<label class="btn btn-secondary active" onclick="setVisibility('chart-container-@Model.Id', 'table-container-@Model.Id');">
					<input type="radio" name="options" id="option1" autocomplete="off" checked> Chart
				</label>
				<label class="btn btn-secondary" onclick="setVisibility('table-container-@Model.Id', 'chart-container-@Model.Id');">
					<input type="radio" name="options" id="option2" autocomplete="off"> Table
				</label>
			</div>
		</div>

		<div id="chart-container-@Model.Id">
			<canvas id="@("chart"+Model.Id)" style="width:100%; height: 20rem"></canvas>
		</div>

		<div id="table-container-@Model.Id" style="display: none; min-height: 20rem">
			<table class="table">
				<thead>
					<tr>
						<th>@Model.YLabel</th>
						<th>@Model.XLabel</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Model.Data) {
						<tr>
							<td>@Html.DisplayFor(e => item.Key)</td>
							<td>@Html.DisplayFor(e => item.Value)</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>

<script type="text/javascript">
	function setVisibility(idOn, idOff) {
		var on = document.getElementById(idOn);
		var off = document.getElementById(idOff);

		if (on.style.display == 'none') {
			on.style.display = 'block';
			off.style.display = 'none';
		}
	}

	$(function () {
	var ctx = document.getElementById(`chart${@Model.Id}`).getContext('2d');

		var chart = new  Chart(ctx, {
			options: options = {
				maintainAspectRatio: true
			},
			data: {
				labels: @Html.Raw(XLabels),
				datasets: [{
					data: @Html.Raw(YValues),
					backgroundColor: [
						'rgb(30, 144, 255)',
						'rgb(84, 91, 98)'
					],
					borderColor: [
						'rgb(30, 144, 255)',
						'rgb(84, 91, 98)'
					],
				}]
			},
			type:'pie'
		});
	});

</script>
