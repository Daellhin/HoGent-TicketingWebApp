// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _2021_dotnet_g_04.Data;

namespace _2021_dotnet_g_04.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210422134539_bijlage")]
    partial class bijlage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Opmerking")
                        .HasColumnName("OPMERKING")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersoonDieOpmerkingToevoegt")
                        .HasColumnName("PERSOONDIEOPMERKINGTOEVOEGT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnName("TICKET_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Tijdstip")
                        .HasColumnName("TIJDSTIP")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("COMMENT");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Contactpersoon", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("KlantId")
                        .HasColumnName("KLANT_ID")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .HasColumnName("NAAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voornaam")
                        .HasColumnName("VOORNAAM")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.HasIndex("KlantId");

                    b.ToTable("CONTACTPERSOON");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Contract", b =>
                {
                    b.Property<int>("Nummer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NUMMER")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContracttypeId")
                        .HasColumnName("CONTRACTTYPE_ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Einddatum")
                        .HasColumnName("EINDDATUM")
                        .HasColumnType("datetime2");

                    b.Property<int>("KlantId")
                        .HasColumnName("KLANT_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Startdatum")
                        .HasColumnName("STARTDATUM")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("int");

                    b.HasKey("Nummer");

                    b.HasIndex("ContracttypeId");

                    b.HasIndex("KlantId");

                    b.ToTable("CONTRACT");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MinimaleDoorlooptijd")
                        .HasColumnName("MINIMALEDOORLOOPTIJD")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .HasColumnName("NAAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prijs")
                        .HasColumnName("PRIJS")
                        .HasColumnType("decimal(20, 4)");

                    b.Property<int>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("int");

                    b.Property<int>("TicketAanmaaktijd")
                        .HasColumnName("TICKETAANMAAKTIJD")
                        .HasColumnType("int");

                    b.Property<int>("TicketAfhandeltijd")
                        .HasColumnName("TICKETAFHANDELTIJD")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CONTRACTTYPE");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.ContractTypeTicketaanmaakmanier", b =>
                {
                    b.Property<int>("ContractTypeId")
                        .HasColumnName("ContractType_ID")
                        .HasColumnType("int");

                    b.Property<int>("Ticketaanmaakmanier")
                        .HasColumnName("TICKETAANMAAKMANIER")
                        .HasColumnType("int");

                    b.HasIndex("ContractTypeId");

                    b.ToTable("ContractType_TICKETAANMAAKMANIER");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Klant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bedrijfsnaam")
                        .HasColumnName("BEDRIJFSNAAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Busnr")
                        .HasColumnName("BUSNR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Datumklantgeworden")
                        .HasColumnName("DATUMKLANTGEWORDEN")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gebruikersnaam")
                        .HasColumnName("GEBRUIKERSNAAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Huisnummer")
                        .HasColumnName("HUISNUMMER")
                        .HasColumnType("int");

                    b.Property<string>("Land")
                        .IsRequired()
                        .HasColumnName("LAND")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnName("POSTCODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("int");

                    b.Property<string>("Straat")
                        .IsRequired()
                        .HasColumnName("STRAAT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wachtwoord")
                        .HasColumnName("WACHTWOORD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Woonplaats")
                        .IsRequired()
                        .HasColumnName("WOONPLAATS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KLANT");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.KlantTelefoonnummer", b =>
                {
                    b.Property<int>("KlantId")
                        .HasColumnName("Klant_ID")
                        .HasColumnType("int");

                    b.Property<string>("Telefoonnummers")
                        .HasColumnName("TELEFOONNUMMERS")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("KlantId");

                    b.ToTable("Klant_TELEFOONNUMMERS");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BekekenDoorTechnieker")
                        .HasColumnName("BEKEKENDOORTECHNIEKER")
                        .HasColumnType("bit");

                    b.Property<int>("ContractNummer")
                        .HasColumnName("CONTRACT_NUMMER")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumAanmaak")
                        .HasColumnName("DATUMAANMAAK")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumAfgehandeld")
                        .HasColumnName("DATUMAFGEHANDELD")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dienst")
                        .HasColumnName("DIENST")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .HasColumnName("OMSCHRIJVING")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .HasColumnName("TITEL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToegewezenTechniekerId")
                        .HasColumnName("TOEGEWEZENTECHNIEKER_ID")
                        .HasColumnType("int");

                    b.Property<int>("Urgency")
                        .HasColumnName("TYPE")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractNummer");

                    b.HasIndex("ToegewezenTechniekerId");

                    b.ToTable("TICKET");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.TicketBijlage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bijlage")
                        .HasColumnName("BIJLAGES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnName("Ticket_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketId1");

                    b.ToTable("Ticket_BIJLAGES");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Werknemer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Busnr")
                        .HasColumnName("BUSNR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumInDienstTreding")
                        .HasColumnName("DATUMINDIENSTTREDING")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dienst")
                        .HasColumnName("DIENST")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gebruikersnaam")
                        .HasColumnName("GEBRUIKERSNAAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Huisnummer")
                        .HasColumnName("HUISNUMMER")
                        .HasColumnType("int");

                    b.Property<string>("Land")
                        .IsRequired()
                        .HasColumnName("LAND")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .HasColumnName("NAAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnName("POSTCODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("int");

                    b.Property<string>("Straat")
                        .IsRequired()
                        .HasColumnName("STRAAT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voornaam")
                        .HasColumnName("VOORNAAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wachtwoord")
                        .HasColumnName("WACHTWOORD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Werknemerstype")
                        .HasColumnName("WERKNEMERSTYPE")
                        .HasColumnType("int");

                    b.Property<string>("Woonplaats")
                        .IsRequired()
                        .HasColumnName("WOONPLAATS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WERKNEMER");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.WerknemerTelefoonnummer", b =>
                {
                    b.Property<string>("Telefoonnummers")
                        .HasColumnName("TELEFOONNUMMERS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WerknemerId")
                        .HasColumnName("Werknemer_ID")
                        .HasColumnType("int");

                    b.HasIndex("WerknemerId");

                    b.ToTable("Werknemer_TELEFOONNUMMERS");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("KlantId")
                        .HasColumnType("int");

                    b.HasIndex("KlantId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Comment", b =>
                {
                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Contactpersoon", b =>
                {
                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Klant", "Klant")
                        .WithMany("Contactpersonen")
                        .HasForeignKey("KlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Contract", b =>
                {
                    b.HasOne("_2021_dotnet_g_04.Models.Domain.ContractType", "ContractType")
                        .WithMany("Contracts")
                        .HasForeignKey("ContracttypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Klant", "Klant")
                        .WithMany("Contracten")
                        .HasForeignKey("KlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.ContractTypeTicketaanmaakmanier", b =>
                {
                    b.HasOne("_2021_dotnet_g_04.Models.Domain.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .HasConstraintName("CntrctTypTCKCntrctTypD")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.KlantTelefoonnummer", b =>
                {
                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Klant", "Klant")
                        .WithMany()
                        .HasForeignKey("KlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.Ticket", b =>
                {
                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Contract", "Contract")
                        .WithMany("Tickets")
                        .HasForeignKey("ContractNummer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Werknemer", "ToegewezenTechnieker")
                        .WithMany("Tickets")
                        .HasForeignKey("ToegewezenTechniekerId");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.TicketBijlage", b =>
                {
                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Ticket", null)
                        .WithMany("Bijlages")
                        .HasForeignKey("TicketId1");
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.WerknemerTelefoonnummer", b =>
                {
                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Werknemer", "Werknemer")
                        .WithMany()
                        .HasForeignKey("WerknemerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_2021_dotnet_g_04.Models.Domain.ApplicationUser", b =>
                {
                    b.HasOne("_2021_dotnet_g_04.Models.Domain.Klant", "Klant")
                        .WithMany()
                        .HasForeignKey("KlantId");
                });
#pragma warning restore 612, 618
        }
    }
}
